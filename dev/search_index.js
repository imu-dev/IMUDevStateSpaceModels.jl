var documenterSearchIndex = {"docs":
[{"location":"pages/types/#State-Space-Models","page":"Models","title":"State Space Models","text":"","category":"section"},{"location":"pages/types/#Interface","page":"Models","title":"Interface","text":"","category":"section"},{"location":"pages/types/","page":"Models","title":"Models","text":"All State Space Models defined in this package must adhere to the interface defined by the StateSpaceModel below.","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"StateSpaceModel","category":"page"},{"location":"pages/types/#IMUDevStateSpaceModels.StateSpaceModel","page":"Models","title":"IMUDevStateSpaceModels.StateSpaceModel","text":"abstract type StateSpaceModel{T}\n\nParent type to all State Space Models. T is the eltype of state.\n\nIn this package we deal with models of the form:\n\nbegincases\nx_k+1 = f(x_k) + ω_kqquad ω_k sim Ω\ny_k = g(x_k) + δ_kqquad δ_k sim Δ\nendcases\n\nwhere\n\nx_k is the state,\ny_k is the observation,\nf is the state transition function,\ng is the observation function,\nω_k is the state noise,\nδ_k is the observation noise,\nΩ is the distribution of the state noise, and\nΔ is the distribution of the observation noise.\n\nIn particular, we do not deal with control inputs and we assume a linearly additive noise model.\n\nwarning: Warning\nWe assume that the state is given by a vector (even a scalar-valued state is represented as a vector of length 1). The same applies to the observations. (At least for now... We might change this in the future, depending on the needs that will arise.)\n\n\n\n\n\n","category":"type"},{"location":"pages/types/","page":"Models","title":"Models","text":"The Julia type used for representation of the state and observation spaces should be known at compile time:","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"Base.eltype(::StateSpaceModel)","category":"page"},{"location":"pages/types/#Base.eltype-Tuple{StateSpaceModel}","page":"Models","title":"Base.eltype","text":"Base.eltype(::StateSpaceModel{T})\n\neltype of the state.\n\n\n\n\n\n","category":"method"},{"location":"pages/types/","page":"Models","title":"Models","text":"note: Note\nNote however, that this does not necessarily prevent auto-promotion of variables. For instance, if state_transition below was called on a StateSpaceModel with Float32 eltype and a DualNumber Dual{Float32}, we would still expect each dimension of the state to be auto-promoted to Dual{Float32}.","category":"page"},{"location":"pages/types/#Functions-that-must-be-implemented","page":"Models","title":"Functions that must be implemented","text":"","category":"section"},{"location":"pages/types/","page":"Models","title":"Models","text":"Each concrete implementation of StateSpaceModel must implement the following functions defining its dynamics:","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"state_transition\nobservation_emission\nstate_noise(m::StateSpaceModel)\nobservation_noise(m::StateSpaceModel)","category":"page"},{"location":"pages/types/#IMUDevStateSpaceModels.state_transition","page":"Models","title":"IMUDevStateSpaceModels.state_transition","text":"state_transition(x, m::StateSpaceModel)\n\nState transition function f of the StateSpaceModel m.\n\ndefault: Important\nAny concrete implementation of the StateSpaceModel must override this function.\n\n\n\n\n\n","category":"function"},{"location":"pages/types/#IMUDevStateSpaceModels.observation_emission","page":"Models","title":"IMUDevStateSpaceModels.observation_emission","text":"observation_emission(x, m::StateSpaceModel)\n\nObservation function g of the StateSpaceModel m.\n\ndefault: Important\nAny concrete implementation of the StateSpaceModel must override this function.\n\n\n\n\n\n","category":"function"},{"location":"pages/types/#IMUDevStateSpaceModels.state_noise-Tuple{StateSpaceModel}","page":"Models","title":"IMUDevStateSpaceModels.state_noise","text":"state_noise(m::StateSpaceModel)\n\nState noise generator Ω of the StateSpaceModel m.\n\ndefault: Important\nAny concrete implementation of the StateSpaceModel must override this function.\n\n\n\n\n\n","category":"method"},{"location":"pages/types/#IMUDevStateSpaceModels.observation_noise-Tuple{StateSpaceModel}","page":"Models","title":"IMUDevStateSpaceModels.observation_noise","text":"observation_noise(m::StateSpaceModel)\n\nObservation noise generator Δ of the StateSpaceModel m.\n\ndefault: Important\nAny concrete implementation of the StateSpaceModel must override this function.\n\n\n\n\n\n","category":"method"},{"location":"pages/types/","page":"Models","title":"Models","text":"As well as functions defining the size of its state space and observation space.","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"Base.size(m::StateSpaceModel)\nBase.size(m::StateSpaceModel, s::Symbol)","category":"page"},{"location":"pages/types/#Base.size-Tuple{StateSpaceModel}","page":"Models","title":"Base.size","text":"Base.size(m::StateSpaceModel)\n\nReturn lengths of the state and observation vectors.\n\n\n\n\n\n","category":"method"},{"location":"pages/types/#Base.size-Tuple{StateSpaceModel, Symbol}","page":"Models","title":"Base.size","text":"Base.size(m::StateSpaceModel, s::Union{Symbol,Val{:state},Val{:observation},Val{:obs})\n\nLength of the state or observation vectors depending on the value of s:\n\ns=:state or s=Val{:state}: length of the state,\ns=:observation or s=:obs or s=Val{:observation} or s=Val{:obs}: length of the observation.\n\ndefault: Important\nAny concrete implementation of the StateSpaceModel must override functions Base.size(m::StateSpaceModel, ::Val{:state}) and Base.size(m::StateSpaceModel, ::Union{Val{:observation},Val{:obs}}).\n\n\n\n\n\n","category":"method"},{"location":"pages/types/#Functions-that-will-work-out-of-the-box","page":"Models","title":"Functions that will work out of the box","text":"","category":"section"},{"location":"pages/types/","page":"Models","title":"Models","text":"Based on these 6 definitions (4 dynamics definitions and 2 size definitions) the following evolution function will work out of the box:","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"IMUDevStateSpaceModels.step","category":"page"},{"location":"pages/types/#IMUDevStateSpaceModels.step","page":"Models","title":"IMUDevStateSpaceModels.step","text":"step(rng::AbstractRNG, m::StateSpaceModel,\n     x::Union{<:AbstractVector,<:AbstractMatrix};\n     state_noise_gen=state_noise(m), obs_noise_gen=observation_noise(m))\n\nPerform a single (random) step:\n\nbegincases\nx = f(x_k) + ω_kqquad ω_k sim Ω\ny = g(x) + δ_kqquad δ_k sim Δ\nendcases\n\nfor a single state xₖ = x if x is a vector, or\nfor a batch of states xₖⁱ = x[:, i] if x is a matrix.\n\n\n\n\n\n","category":"function"},{"location":"pages/types/","page":"Models","title":"Models","text":"Under the hood it will call these two functions:","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"IMUDevStateSpaceModels.state_step\nIMUDevStateSpaceModels.obs_step","category":"page"},{"location":"pages/types/#IMUDevStateSpaceModels.state_step","page":"Models","title":"IMUDevStateSpaceModels.state_step","text":"state_step(rng::AbstractRNG, m::StateSpaceModel,\n           x::Union{<:AbstractVector, <:AbstractMatrix};\n           noise_gen=state_noise(m))\n\nPerform a single (random) step:\n\nf(x_k) + ω_kquad ω_k sim Ω\n\nfor a single state xₖ = x if x is a vector, or\nfor a batch of states xₖⁱ = x[:, i] if x is a matrix.\n\n\n\n\n\n","category":"function"},{"location":"pages/types/#IMUDevStateSpaceModels.obs_step","page":"Models","title":"IMUDevStateSpaceModels.obs_step","text":"obs_step(rng::AbstractRNG, m::StateSpaceModel,\n         x::Union{<:AbstractVector, <:AbstractMatrix};\n         noise_gen=observation_noise(m))\n\nPerform a single (random) observation step:\n\ng(x_k) + δ_kquad δ_k sim Δ\n\nfor a single state xₖ = x if x is a vector, or\nfor a batch of states xₖⁱ = x[:, i] if x is a matrix.\n\n\n\n\n\n","category":"function"},{"location":"pages/types/#Gaussian-State-Space-Models","page":"Models","title":"Gaussian State Space Models","text":"","category":"section"},{"location":"pages/types/","page":"Models","title":"Models","text":"Abstract type that defines the type of state and observation noise to be Gaussian. Any child struct will inherit the definitions of Ω=N(0Q) and Δ=N(0R).","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"GaussianStateSpaceModel","category":"page"},{"location":"pages/types/#IMUDevStateSpaceModels.GaussianStateSpaceModel","page":"Models","title":"IMUDevStateSpaceModels.GaussianStateSpaceModel","text":"abstract type GaussianStateSpaceModel{T} <: StateSpaceModel{T}\n\nParent type to Gaussian State Space Models of the form:\n\nbegincases\nx_k+1 = f(x_k) + ω_kqquad ω_k sim N(0 Q)\ny_k = g(x_k) + δ_kqquad δ_k sim N(0 R)\nendcases\n\nwhere Q and R are the state and observation noise covariance matrices, and the remaining parameters are as in the description of the StateSpaceModel type.\n\n\n\n\n\n","category":"type"},{"location":"pages/types/","page":"Models","title":"Models","text":"state_noise(m::GaussianStateSpaceModel)\nobservation_noise(m::GaussianStateSpaceModel)","category":"page"},{"location":"pages/types/#IMUDevStateSpaceModels.state_noise-Tuple{GaussianStateSpaceModel}","page":"Models","title":"IMUDevStateSpaceModels.state_noise","text":"state_noise(m::GaussianStateSpaceModel)\n\nReturn N(0 Q): a (Gaussian) distribution of the state noise of the GaussianStateSpaceModel m.\n\n\n\n\n\n","category":"method"},{"location":"pages/types/#IMUDevStateSpaceModels.observation_noise-Tuple{GaussianStateSpaceModel}","page":"Models","title":"IMUDevStateSpaceModels.observation_noise","text":"observation_noise(m::GaussianStateSpaceModel)\n\nReturn N(0 R): a (Gaussian) distribution of the observation noise of the GaussianStateSpaceModel m.\n\n\n\n\n\n","category":"method"},{"location":"pages/types/","page":"Models","title":"Models","text":"Any concrete implementation must define the following two functions:","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"state_noise_cov\nobservation_noise_cov","category":"page"},{"location":"pages/types/#IMUDevStateSpaceModels.state_noise_cov","page":"Models","title":"IMUDevStateSpaceModels.state_noise_cov","text":"state_noise_cov(m::GaussianStateSpaceModel)\n\nReturn the state noise covariance matrix Q of the GaussianStateSpaceModel m.\n\ndefault: Important\nAny concrete implementation of the GaussianStateSpaceModel must override this function.\n\n\n\n\n\n","category":"function"},{"location":"pages/types/#IMUDevStateSpaceModels.observation_noise_cov","page":"Models","title":"IMUDevStateSpaceModels.observation_noise_cov","text":"observation_noise_cov(m::GaussianStateSpaceModel)\n\nReturn the observation noise covariance matrix R of the GaussianStateSpaceModel m.\n\ndefault: Important\nAny concrete implementation of the GaussianStateSpaceModel must override this function.\n\n\n\n\n\n","category":"function"},{"location":"pages/types/","page":"Models","title":"Models","text":"note: Note\nAdditionally, functions state_transition, observation_emission, and two versions of Base.size must be implemented to satisfy the requirements of the StateSpaceModel interface.","category":"page"},{"location":"pages/types/#Linear-Gaussian-State-Space-Model","page":"Models","title":"Linear Gaussian State Space Model","text":"","category":"section"},{"location":"pages/types/","page":"Models","title":"Models","text":"LinearGaussianStateSpaceModel is a concrete implementation of the GaussianStateSpaceModel (thus in particular, also of StateSpaceModel's).","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"LinearGaussianStateSpaceModel","category":"page"},{"location":"pages/types/#IMUDevStateSpaceModels.LinearGaussianStateSpaceModel","page":"Models","title":"IMUDevStateSpaceModels.LinearGaussianStateSpaceModel","text":"struct LinearGaussianStateSpaceModel{T} <: GaussianStateSpaceModel{T}\n\nConstructor\n\nLinearGaussianStateSpaceModel([T::DataType]; F, Q, H, R)\n\nState space model with linear dynamics, additive Gaussian noise and linear, Gaussian observations. It is given by the following set of equations:\n\nbegincases\nx_t+1 = F times x_t + w_tqquad w_t sim N(0 Q)\ny_t = H times x_t + v_tqquad  v_t sim N(0 R)\nendcases\n\ntip: Tip\nYou can use LinGsnSSM alias for LinearGaussianStateSpaceModel.\n\n\n\n\n\n","category":"type"},{"location":"pages/types/","page":"Models","title":"Models","text":"The following additional functions are defined for LinearGaussianStateSpaceModel:","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"transition_matrix\nobservation_matrix","category":"page"},{"location":"pages/types/#IMUDevStateSpaceModels.transition_matrix","page":"Models","title":"IMUDevStateSpaceModels.transition_matrix","text":"transition_matrix(m::LinGsnSSM)\n\nReturn state evolution matrix F of the LinearGaussianStateSpaceModel m.\n\n\n\n\n\n","category":"function"},{"location":"pages/types/#IMUDevStateSpaceModels.observation_matrix","page":"Models","title":"IMUDevStateSpaceModels.observation_matrix","text":"observation_matrix(m::LinGsnSSM)\n\nReturn the observation matrix H of the LinearGaussianStateSpaceModel m.\n\n\n\n\n\n","category":"function"},{"location":"pages/types/#Example-of-a-Non-linear-Non-Gaussian-State-Space-Model","page":"Models","title":"Example of a Non-linear Non-Gaussian State Space Model","text":"","category":"section"},{"location":"pages/types/","page":"Models","title":"Models","text":"More general models must be implemented by the user by adhering to the StateSpaceModel interface. Below is an example of a 1-dimensional state evolving as a double-well potential with Cauchy noise and non-linear observation model perturbed by Poisson noise:","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"using Distributions\nusing IMUDevStateSpaceModels\nusing Plots\n\nconst SSMs = IMUDevStateSpaceModels\n\n\"\"\"\n    MyNonLinearStateSpaceModel()\n\nState space model with double-well type transition function, non-linear\nobservation operator and non-Gaussian noise, given by:\n\n    x_{k+1} = x_k - θ(x_k)^2((x_k)^2 - μ) + σ_k,    σ_k ∼ Cauchy(x₀, γ),\n    y_k     = ceil(x_k)              + ν_k,    ν_k ∼ Poisson(λ)\n\"\"\"\nstruct MyNonLinearStateSpaceModel <: StateSpaceModel{Float64}\n    θ::Float64\n    μ::Float64\n    x₀::Float64\n    γ::Float64\n    λ::Int64\nend\n\nconst MySSM = MyNonLinearStateSpaceModel\n\nBase.size(::MySSM, ::Union{Val{:state}}) = 1\nBase.size(::MySSM, ::Union{Val{:observation},Val{:obs}}) = 1\nSSMs.state_noise(m::MySSM) = Product([Cauchy(m.x₀, m.γ)])\nSSMs.observation_noise(m::MySSM) = Product([Poisson(m.λ)])\n\nSSMs.state_transition(x, m::MySSM) = x - m.θ .* x .* (x .^ 2 .- m.μ)\nSSMs.observation_emission(x, ::MySSM) = ceil.(x)","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"tip: Tip\nNotice that despite the model being 1-dimensional we don't treat it as a scalar-valued process, but instead, as a 1-element vector-valued process. In particular, we use the Distributions.jl Product to compose Univariate distributions into a Multivariate one.","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"Once defined, we can define a model and, for instance, sample and plot trajectories (see Sampling and Plotting sections for more details):","category":"page"},{"location":"pages/types/","page":"Models","title":"Models","text":"using Plots\n\nmodel = MySSM(0.01, 1.0, 0.0, 0.001, 1)\n\nx₀ = [1.0]\nnum_timepoints = 100\nxx, yy = rand(model, x₀, num_timepoints)\n\nplot(trajectoryplot(0:num_timepoints, yy; seriestype=:scatter, label=\"\", title=\"Observations\"),\n     trajectoryplot(0:num_timepoints, xx; seriestype=:scatter, label=\"\", title=\"Underlying state\"))","category":"page"},{"location":"pages/plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"pages/plotting/","page":"Plotting","title":"Plotting","text":"To plot sampled trajectories use:","category":"page"},{"location":"pages/plotting/","page":"Plotting","title":"Plotting","text":"trajectoryplot","category":"page"},{"location":"pages/plotting/#IMUDevStateSpaceModels.trajectoryplot","page":"Plotting","title":"IMUDevStateSpaceModels.trajectoryplot","text":"trajectoryplot([tt], xx::AbstractMatrix; seriestype=:path, label=\"\")\n\nCreate a plot of trajectories, each shown on its own subplot. The xx matrix should have size (n, t) where n is the number of states and t is the number of timepoints. The tt vector should have length t and is optional.\n\ntrajectoryplot([tt], xx::AbstractMatrix, ΣΣ::Abstract3Tensor;\n               seriestype=:path, label=\"\")\n\nSame as trajectoryplot([tt], xx::AbstractMatrix; kwargs...), but also includes an error band for each trajectory, inferred from the covariance matrices ΣΣ. The ΣΣ 3-tensor should have size (n, n, t) where n is the number of states and t is the number of timepoints. Note that only the diagonal elements of ΣΣ are used to compute the error bands.\n\n\n\n\n\n","category":"function"},{"location":"pages/plotting/","page":"Plotting","title":"Plotting","text":"warning: Warning\nEven though sampling can be done in batches, it is only possible to plot individual trajectories. You can however add trajectories to the existing plot with trajectoryplot!: trajectory of each state dimension will be added to its corresponding subplot.","category":"page"},{"location":"pages/plotting/#Example","page":"Plotting","title":"Example","text":"","category":"section"},{"location":"pages/plotting/","page":"Plotting","title":"Plotting","text":"Consider the example defined in the Sampling section. We can sample trajectories and plot them","category":"page"},{"location":"pages/plotting/","page":"Plotting","title":"Plotting","text":"using Plots\n\n# plot a single trajectory\ntrajectoryplot(xx_single;\n               label=[\"acceleration\" \"velocity\"],\n               layout=(1, 2),\n               size=(800, 300))","category":"page"},{"location":"pages/plotting/","page":"Plotting","title":"Plotting","text":"We can also add error bands and another trajectory.","category":"page"},{"location":"pages/plotting/","page":"Plotting","title":"Plotting","text":"using Plots\n\n# define some covariance matrices\n# (they don't have any meaning in this context,\n# just for demonstration purposes)\nΣΣ = Array{Float64}(undef, size(m, :state), size(m, :state), num_timepoints + 1)\nfor i in 0:num_timepoints\n    ΣΣ[:, :, i + 1] = (1 + 0.1 * i) * diagm([1.0, 1.0])\nend\n\n# plot a single trajectory with uncertainty\np = trajectoryplot(0.01 .* (0:num_timepoints),\n                   xx_single,\n                   ΣΣ;\n                   label=[\"acceleration\" \"velocity\"],\n                   layout=(1, 2),\n                   size=(800, 300))\n\n# add another trajectory to the existing plot\ntrajectoryplot!(p,\n                0.01 .* (0:num_timepoints),\n                xx_batch[:, 1, :];\n                label=[\"acceleration 2\" \"velocity 2\"])","category":"page"},{"location":"#IMUDevStateSpaceModels.jl","page":"Home","title":"IMUDevStateSpaceModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"A minimalist implementation of some State Space Models crafted to be readily compatible with Neural Networks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nJulia has already a host of excellent packages implementing State Space Models, as well as those that perform all sorts of inference, forecasting or simulation on them; see for instance StateSpaceModels, DynamicalSystems, LowLevelParticleFilters, Kalman or DifferentialEquations for some examples that you should consider first, before trying to use this package.","category":"page"},{"location":"pages/sampling/#Sampling","page":"Sampling","title":"Sampling","text":"","category":"section"},{"location":"pages/sampling/","page":"Sampling","title":"Sampling","text":"It is possible to sample trajectories of any fully defined StateSpaceModel. This can be done either in-place, or out-of-place:","category":"page"},{"location":"pages/sampling/","page":"Sampling","title":"Sampling","text":"IMUDevStateSpaceModels.Random.rand!\nIMUDevStateSpaceModels.Random.rand","category":"page"},{"location":"pages/sampling/#Random.rand!","page":"Sampling","title":"Random.rand!","text":"Random.rand!([rng::AbstractRNG], out::AbstractMatrix, m::StateSpaceModel,\n             x0::AbstractVector)\n            \nRandom.rand!([rng::AbstractRNG], out_x::AbstractMatrix, out_y::AbstractMatrix,\n             m::StateSpaceModel, x0::AbstractVector)\n\nSample a trajectory of the state space model m starting from x0, store the state trajectory in out_x (if out_x provided) and store the observations in out or out_y.\n\nRandom.rand!([rng::AbstractRNG], out::Abstract3Tensor, m::StateSpaceModel,\n             x0::AbstractMatrix)\n\nRandom.rand!(rng::AbstractRNG, out_x::Abstract3Tensor, out_y::Abstract3Tensor,\n             m::StateSpaceModel, x0::AbstractMatrix)\n\nSample a batch of trajectories of the state space model m, each starting from a separate x0[:, i], store the state trajectory in out_x (if out_x provided) and store the observations in out or out_y.\n\nnote: Note\nx0 will be stored in out_x (if provided) as the first state and y0 (sampled from x0) will be stored in out_y (or out) as the first observation.\n\n\n\n\n\n","category":"function"},{"location":"pages/sampling/#Base.rand","page":"Sampling","title":"Base.rand","text":"Random.rand([rng::AbstractRNG], m::StateSpaceModel, x0::AbstractVector,\n            num_obs::Int)\n\nSample a trajectory of the state space model m starting from x0 and return the state trajectory and the observations.\n\nRandom.rand([rng::AbstractRNG], m::StateSpaceModel, x0::AbstractMatrix,\n            num_obs::Int)\n\nSample a batch of trajectories of the state space model m, each starting from a separate x0[:, i] and return the state trajectories and the observations.\n\nnote: Note\nnum_obs is the number of observations to be sampled, excluding the initial state. However, the initial state (as well as the \"zeroth\" observation) will be prepended to the output arrays.\n\n\n\n\n\n","category":"function"},{"location":"pages/sampling/","page":"Sampling","title":"Sampling","text":"The trajectories can be sampled either individually or in batches—the appropriate mode will be inferred from the dimension of the state space array x0. For in-place computations the number of timepoints (num_obs) will be inferred from the size of the output containers.","category":"page"},{"location":"pages/sampling/","page":"Sampling","title":"Sampling","text":"Out-of-place sampling will always return the sampled underlying state xx together with the observations yy.","category":"page"},{"location":"pages/sampling/","page":"Sampling","title":"Sampling","text":"For in-place sampling the underlying state can be discarded by passing only a container intended to store the observations yy.","category":"page"},{"location":"pages/sampling/#Example","page":"Sampling","title":"Example","text":"","category":"section"},{"location":"pages/sampling/","page":"Sampling","title":"Sampling","text":"In the following example we first show how to sample a single trajectory and then a batch of trajectories.","category":"page"},{"location":"pages/sampling/","page":"Sampling","title":"Sampling","text":"using Distributions\nusing IMUDevStateSpaceModels\nusing LinearAlgebra\n\nfunction constant_acceleration_model_2d(δt)\n    # time-evolution of acceleration & velocity\n    F = [1.0 δt;\n         0.0 1.0]\n    Q = [(δt^3)/3 (δt^2)/2;\n         (δt^2)/2 δt]\n\n    H = [1.0 0.0;]\n    R = [1.0;;]\n    return LinGsnSSM(Float32; F, Q, H, R)\nend\n\nm = constant_acceleration_model_2d(0.01)\nℙx₀ = MvNormal(zeros(size(m, :state)), I)\nnum_timepoints = 100\n\n# sample a single trajectory\nxx_single, yy_single = rand(m, rand(ℙx₀), num_timepoints)\n\n# sample a batch of trajectories\nnum_samples = 10\nx0s = rand(ℙx₀, num_samples)\nxx_batch, yy_batch = rand(m, x0s, num_timepoints)","category":"page"}]
}
